// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  local
  google
}

enum PaymentStatus {
  pending
  succsess
  failed
}

model User {
  id            String            @id @default(uuid())
  name          String
  email         String            @unique
  password      String?
  provider      Provider          @default(local)
  googleId      String?           @unique
  meetings      Meeting[]         @relation("createdMeetings")
  purchases     MeetingPurchase[]
  payments      Payment[]
  refreshTokens RefreshToken[]
}

model Meeting {
  id           String            @id @default(uuid())
  title        String
  desc         String
  password     String?
  isProtected  Boolean
  createdBy    User              @relation("createdMeetings", fields: [createdById], references: [id])
  createdById  String
  createdAt    DateTime          @default(now())
  price        Float
  isPaid       Boolean
  startingTime DateTime
  purchases    MeetingPurchase[]
  payments     Payment[]
}

model MeetingPurchase {
  id          String   @id @default(uuid())
  meeting     Meeting  @relation(fields: [meetingId], references: [id])
  meetingId   String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  purchasedAt DateTime @default(now())
  amountPaid  Float
}

model Payment {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  meeting   Meeting       @relation(fields: [meetingId], references: [id])
  meetingId String
  tnxId     String        @unique
  status    PaymentStatus @default(pending)
  createdAt DateTime      @default(now())
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])
  @@index([userId])
}
